@startuml uml.png

title <size:18> Class Structure </size>

package Graph {

	package Project {
		interface IProject {
			+string Name{get}
			+UColor Color{get}
			+bool IsEffectiveDefault{get}
		}
		interface ISubProject {
			+IProject Parent{get}
		}
		IProject <|.. Project
		ISubProject <|.. SubProject
		Project <|-- SubProject
	}

	package Act {

		interface IContent {
			+IProject Project{get}
			+string Name{get}
			+bool IsEffective{get}
		}
		IContent <|.down. Content
		IProject --left-o Content

		interface IContext {
			+IActivity NextAct{get}
			+float BeginTime{get}
			+float? EndTime{get}
			+float Duration{get}
		}
		IContext <|.down. Context

		interface IActivity {
			+IContent Content{get}
			+IContext Context{get}
		}
		IActivity <|.. Activity
		IContent --o Activity
		IContext --o Activity

		interface IActivitiesContainer {
			+IActivity At(int index);
			+IActivity At(MinuteOfDay time);
			+int AtIndex(MinuteOfDay time);

			+void PushBack(IActivity act);
			+void Insert(IActivity act, int destIndex);
			+void Remove(int index);
			+void Move(int index, MinuteOfDay newBegin, MinuteOfDay newEnd);
			+void Overwrite(int index, IContent newContent);
		}
		IActivitiesContainer <|.. ActivitiesContainer

		interface IActivitiesMgr {
			+void BeginNewAct(IProject proj, string name, bool isEffective);
			+void BeginNewAct(IProject proj, string name);
			+void ChangeBorder(int lastIndexBeforeBorder, MinuteOfDay newMinute);
		}
		IActivitiesMgr <|.. ActivitiesMgr
		IActivitiesContainer --o ActivitiesMgr


		package View {

			interface ICylinderOfTheDay
			class CylinderOfTheDay
			ICylinderOfTheDay <|.. CylinderOfTheDay


			interface IActStatus
			IActStatus <|.. ActStatus
			interface IActOperator
			IActOperator <|.. ActOperator
			interface IActView
			IActView <|.. ActView

			IActStatus <-up- ActOperator
			IActView <-up- ActOperator

		}

	}

	IActOperator --o CylinderOfTheDay
}


@enduml

