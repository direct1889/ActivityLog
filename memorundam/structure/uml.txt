@startuml uml.png

title <size:18> Class Structure </size>

package Main {

	package Act {

		package OrderedMap {
			interface IReadOnlyOrderedMap
			interface IOrderedMap
			IReadOnlyOrderedMap <|-down- IOrderedMap
			IOrderedMap <|.down. OrderedMap

			interface IRxOrderedMap
			IOrderedMap <|-down- IRxOrderedMap
			IRxOrderedMap <|.down. RxOrderedMap
			OrderedMap <|-down- RxOrderedMap
		}

		package Tree {
			interface IHashTreeDataType
			interface IHashTreeNode
			IHashTreeNode <|.down. HashTreeNode
			IHashTreeDataType --o HashTreeNode
			IHashTreeNode --o HashTreeNode

			interface IHashTree
			IHashTree <|.down. HashTree
			IHashTreeNode --o HashTree

			interface IRxHashTree
			IRxHashTree <|.down. RxHashTree
			HashTree <|-down- RxHashTree
		}

		package ContentTree {
			interface IContentAdapter
			class ContentAdapter
			class ProjectAdapter
			class ActivityAdapter
			IHashTreeNode <|-- IContentAdapter
			IContentAdapter <|.down. ContentAdapter
			ContentAdapter <|-down- ProjectAdapter
			ContentAdapter <|-down- ActivityAdapter

			interface IProjectDB
			interface IActivityDB
			interface IContentDB
			IProjectDB <|-left- IContentDB
			IActivityDB <|-right- IContentDB
			IContentDB <|.down. ContentTree
			RxHashTree <|-- ContentTree
			IContentAdapter --o ContentTree

			class CDB
			CDB o-down- IProjectDB
			CDB o-down- IActivityDB
			CDB o-down- IContentDB
		}

		IHashTreeDataType <|-- IContentAdapter
		IOrderedMap --o HashTreeNode

		interface IContent {
			+IProject Project{get}
			+string Name{get}
			+bool IsEffective{get}
		}
		interface IActivity
		IActivity <|.. Activity
		interface IProject
		IProject <|.. Project
		IContent <|-down- IActivity
		IContent <|-down- IProject

		IHashTreeDataType <|-- IContent


		interface IROContext {
			+IActRecord NextAct{get}
			+float BeginTime{get}
			+float? EndTime{get}
			+float Duration{get}
		}
		interface IContext
		IROContext <|-down- IContext
		IContext <|.down. Context

		interface IActRecord {
			+IActivity Activity{get}
			+IContext Context{get}
		}
		IActRecord <|.. ActRecord
		IActivity --o ActRecord
		IContext --o ActRecord

		interface IIndependentContext
		IIndependentContext <|.. IndependentContext
		interface IIndependentActRecord
		IIndependentActRecord <|.. IndependentActRecord
		IContent --o IndependentActRecord
		IIndependentContext --o IndependentActRecord

		interface IROActSequence
		interface IActSequence {
			+IActRecord At(int index);
			+IActRecord At(MinuteOfDay time);
			+int AtIndex(MinuteOfDay time);

			+void PushBack(IActRecord act);
			+void Insert(IActRecord act, int destIndex);
			+void Remove(int index);
			+void Move(int index, MinuteOfDay newBegin, MinuteOfDay newEnd);
			+void Overwrite(int index, IContent newContent);
		}
		IROActSequence <|-- IActSequence
		IActSequence <|.. ActSequence
		IActRecord --* ActSequence

		interface IActSequenceMgr {
			+void BeginNewAct(IProject proj, string name, bool isEffective);
			+void BeginNewAct(IProject proj, string name);
			+void ChangeBorder(int lastIndexBeforeBorder, MinuteOfDay newMinute);
		}
		IActSequenceMgr <|.. ActSequenceMgr
		IActSequence --o ActSequenceMgr


		package View {

			package DoActivity {

				interface IRxContentPanelList {
					+IObservable<IActivity> ActivityChosen{get}
				}
				interface IContentPanelListAsParent {
					+void OnChosenActivity(IActivity content);
				}
				IRxContentPanelList <|.. ContentPanelList
				IContentPanelListAsParent <|.. ContentPanelList
				IContentPanel --o ContentPanelList

				interface IContentPanelUI {
					+void SetContent(IContent content);
					+void SetIndent(int indent);
				}
				IContentPanelUI <|.. ContentPanelUI

				interface IContentPanel {
					+void Initialize(IContentAdapter content, IContentPanelListAsParent parent);
				}
				IContentPanel <|.. ContentPanel
				IContentPanelListAsParent <-- ContentPanel
				IContentPanelUI <-- ContentPanel
				IContentAdapter --o ContentPanel

			}

			package RecordsCylinder {

				interface IActRecordBlock {
					+void Initialize(IROActRecord act, IActRecordsCylinder cylinder);
					+void RefreshSize();
				}
				IActRecordBlock <|.. ActRecordBlock

				interface IActRecordsCylinderUI {
					+Vector2 RectSize { get; }
				}
				interface IActRecordsCylinder {
					+void CreateBlock(IROActRecord act);
				}
				IActRecordsCylinderUI <|.. ActRecordsCylinder
				IActRecordsCylinder   <|.. ActRecordsCylinder
				IActRecordBlock   --o ActRecordsCylinder

				IActRecordsCylinderUI <|.. ActRecordBlock

			}

		}

		package STrack {

			class ActRecordCylinderMgr {
				-Act.IActSequenceMgr m_acts;
				-Act.View.ActRecordsCylinder m_recCylinder;
				-Act.View.ContentPanelList m_doActList;
				-GameObject DoActCanvas;
			}

			IActSequenceMgr --o ActRecordCylinderMgr
			IActRecordsCylinder --o ActRecordCylinderMgr

		}

	}

}


@enduml

